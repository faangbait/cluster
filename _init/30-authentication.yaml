##### HELM #####################################################################
#
# kubectl config set-context --current --namespace=vault
#
# kubectl create secret generic auth-redis --from-literal="redis-password=$(read -p "Redis Password: "; echo $REPLY)"
#
# helm repo add bitnami https://charts.bitnami.com/bitnami
# helm install auth-redis bitnami/redis --values=infrastructure/storage/auth-redis-values.yaml
#
##### AUTH #####################################################################

apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: forwardauth-authelia
  namespace: vault
  labels:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/part-of: core
  annotations:
    a8r.io/description: "Provides Traefik middleware for secure authentication."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  forwardAuth:
    address: http://authelia.vault.svc.cluster.local/api/verify?rd=https://sso.madeof.glass/
    trustForwardHeader: true
    authResponseHeaders:
      - Remote-User
      - Remote-Name
      - Remote-Email
      - Remote-Groups
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: headers-authelia
  namespace: vault
  labels:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/part-of: core
  annotations:
    a8r.io/description: "Provides Traefik middleware for secure authentication."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  headers:
    browserXssFilter: true
    customFrameOptionsValue: "SAMEORIGIN"
    customResponseHeaders:
      Cache-Control: "no-store"
      Pragma: "no-cache"
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: chain-authelia-auth
  namespace: vault
  labels:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/part-of: core
  annotations:
    a8r.io/description: "Provides Traefik middleware for secure authentication."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  chain:
    middlewares:
      - name: forwardauth-authelia
        namespace: vault
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: chain-authelia
  namespace: vault
  labels:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/part-of: core
  annotations:
    a8r.io/description: "Provides Traefik middleware for secure authentication."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  chain:
    middlewares:
      - name: headers-authelia
        namespace: vault
---

# Create Authelia configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-configmap
  namespace: vault
  labels:
    app.kubernetes.io/name: auth-configmap
    app.kubernetes.io/part-of: core
  annotations:
    a8r.io/description: "Creates authelia config and file-based auth for users."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
data:
  users.yml: |
    users:
      ss:
        displayname: "S Smith"
        password: "$argon2id$v=19$m=65536,t=3,p=4$jel1WjusitOk2lYBhSwUOA$KHlGhYh14UXpvJbvWMUroIm4Mk9MJ/6cR43646B5hVQ"
        email: "sam@madeof.glass"
        groups:
          - admins
          - dev
      ah:
        displayname: "A Her"
        password: "$argon2id$v=19$m=65536,t=3,p=4$a9kS3yKRlWzZ6PWQpNxPJw$RDY6Dt1PY55Vb91m4B2qOAsnB84GiQoS+CGLrCr0ezo"
        email: "sam@madeof.glass"
        groups:
          - admins
          - dev
        
  configuration.yml: |
    access_control:
      default_policy: deny
      rules:
      - domain: '*.lab.madeof.glass'
        policy: one_factor
      - domain: '*.antennae.madeof.glass'
        policy: one_factor
      - domain: '*.archives.madeof.glass'
        policy: one_factor
      - domain: '*.vault.madeof.glass'
        policy: one_factor
      - domain: '*.news.madeof.glass'
        policy: one_factor
      - domain: '*.home.madeof.glass'
        policy: one_factor
      - domain: '*.public.madeof.glass'
        policy: bypass
      - domain: 'screen.news.madeof.glass'
        policy: bypass
      - domain: 'sso.madeof.glass'
        policy: bypass
    authentication_backend:
      file:
        path: /configmap/users.yml
    log:
      level: info
      keep_stdout: true
      file_path: /config/authelia-log
    notifier:
      filesystem:
        filename: /config/notification-log
      # smtp:
    password_policy:
      standard:
        enabled: true
        min_length: 4
        max_length: 0
        require_uppercase: false
        require_lowercase: false
        require_number: false
        require_special: false
    regulation:
      max_retries: 3
      find_time: 1m
      ban_time: 5m
    server:
      host: 0.0.0.0
      port: 9091
    session:
      domain: madeof.glass
      redis:
        host: auth-redis
        high_availability:
          sentinel_name: authelia
    storage:
      local:
        path: /app/db.sqlite3
    telemetry:
      metrics:
        enabled: true
        address: "tcp://0.0.0.0:9999"
        buffers:
          read: 4096
          write: 4096
        timeouts:
          read: 6s
          write: 6s
          idle: 30s
    theme: auto
    totp:
      issuer: madeof.glass
      period: 30
      skew: 1
    default_redirection_url: https://madeof.glass
---
# Create Authelia PVC
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: authelia
  namespace: vault
spec:
  storageClassName: "glass-cfg"
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Mi
---
# Create Authelia Secret Files
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-auth-secrets
  namespace: vault
  labels:
    app.kubernetes.io/name: generate-auth-secrets
    app.kubernetes.io/part-of: auth
  annotations:
    a8r.io/description: "Generates secrets once."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  template:
    spec:
      containers:
      - name: generate-auth-secrets
        image: docker.io/alpine/openssl:latest
        command:
          - sh
          - -c
          - openssl rand -base64 128 > /config/AUTHELIA_JWT_SECRET; openssl rand -base64 128 > /config/AUTHELIA_SESSION_SECRET; openssl rand -base64 128 > /config/AUTHELIA_STORAGE_ENCRYPTION_KEY;
        resources:
          requests:
            memory: 128Mi
            cpu: ".5"
          limits:
            memory: 1Gi
            cpu: ".5"
        volumeMounts:
        - mountPath: /config
          name: cfg-auth
      volumes:
        - name: cfg-auth
          persistentVolumeClaim:
            claimName: authelia
      restartPolicy: OnFailure
---
# Create Authelia Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authelia
  namespace: vault
  labels:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/part-of: auth
  annotations:
    a8r.io/description: "Deploys Authelia into the Default namespace."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: authelia
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authelia
        app.kubernetes.io/part-of: auth
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
      - name: authelia
        image: ghcr.io/authelia/authelia:4.37.5
        imagePullPolicy: IfNotPresent
        command: ["authelia", "--config=/configmap/configuration.yml"]
        env:
          - name: AUTHELIA_JWT_SECRET_FILE
            value: /config/AUTHELIA_JWT_SECRET
          - name: AUTHELIA_SESSION_SECRET_FILE
            value: /config/AUTHELIA_SESSION_SECRET
          - name: AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE
            value: /config/AUTHELIA_STORAGE_ENCRYPTION_KEY
          - name: AUTHELIA_SESSION_REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: auth-redis
                key: redis-password
          - name: AUTHELIA_SESSION_REDIS_HIGH_AVAILABILITY_SENTINEL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: auth-redis
                key: redis-password
        ports:
        - name: http
          containerPort: 9091
          protocol: TCP
        volumeMounts:
        - mountPath: /config
          name: cfg-auth
        - mountPath: /configmap
          name: auth-configmap
        resources:
          requests:
            memory: 1Gi
            cpu: "2"
          limits:
            memory: 2Gi # Probably too high
            cpu: "2"
      volumes:
        - name: cfg-auth
          persistentVolumeClaim:
            claimName: authelia
        - name: auth-configmap
          configMap:
            name: auth-configmap
---
# Create Authelia Service
apiVersion: v1
kind: Service
metadata:
  name: authelia
  namespace: vault
  labels:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/part-of: auth
  annotations:
    a8r.io/description: "Creates the Authelia service in the default namespace."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  selector:
    app.kubernetes.io/name: authelia
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
---
# Create Authelia IngressRoute
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: authelia
  namespace: vault
  labels:
    app.kubernetes.io/name: authelia
    app.kubernetes.io/part-of: auth
  annotations:
    a8r.io/description: "Provides Traefik ingress for secure authentication."
    a8r.io/owner: "@faangbait"
    a8r.io/repository: "https://github.com/faangbait/antennae"
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`sso.madeof.glass`)
      kind: Rule
      middlewares:
        - name: chain-authelia
          namespace: vault
      services:
        - kind: Service
          name: authelia
          port: 80
          namespace: vault
          passHostHeader: true
          strategy: RoundRobin
          scheme: http
          responseForwarding:
            flushInterval: 100ms
  tls:
    certResolver: letsencrypt
